def inline [ + ](x: Int, y: Int) -> Int {
    return %iadd(x, y);
}

def inline [ - ](x: Int, y: Int) -> Int {
    return %isub(x, y);
}

def inline [ * ](x: Int, y: Int) -> Int {
    return %imul(x, y);
}

def inline [ / ](x: Int, y: Int) -> Int {
    return %idiv(x, y);
}

def inline [ % ](x: Int, y: Int) -> Int {
    return %imod(x, y);
}

def inline [ == ](x: Int, y: Int) -> Int {
    return %ieq(x, y);
}

def inline [ != ](x: Int, y: Int) -> Int {
    return %ine(x, y);
}

def inline [ < ](x: Int, y: Int) -> Int {
    return %ilt(x, y);
}

def inline [ <= ](x: Int, y: Int) -> Int {
    return %ile(x, y);
}

def inline [ > ](x: Int, y: Int) -> Int {
    return %igt(x, y);
}

def inline [ >= ](x: Int, y: Int) -> Int {
    return %ige(x, y);
}

def main() -> Int {
    return 5 / 2 == 2;
}
